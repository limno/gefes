Assembly "{{assembly_title}}"
=============================

General Information
-------------------
This assembly uses the software "{{assembler_version}}" and uses a kmer size of "{{kmer_size}}" as well as a contig length cutoff of {{contig_cutoff}} base pairs. There are {{count_samples}} samples in this assembly, which are part of the project code `{{aggregate_short_name}}` ("{{aggregate_long_name}}").

-------

Processing
----------
* This report (and all the analysis) was generated using the GEFES project at:

    <http://xapple.github.io/gefes/>

* Version `{{project_version}}` of the pipeline was used.

* This document was generated at `{{now}}`.

* The results and all the files generated for this sample can be found at:

    {{results_directory}}

{{#git}}
* The exact git hash of the latest commit was: {{git_hash}}

* Also more simply referred to by its shortened tag `{{git_tag}}`.
{{/git}}
-------

Contigs
-------
The first step is to take all reads from all samples (totaling {{count_total_reads}}) and input them into the assembly algorithm. This results in the production of {{count_contigs}} contigs, of which the length distribution can be seen in figure \ref{contigs_len_hist}:

{{contigs_len_hist}}

The total amount of base pairs contained in all contigs is {{contigs_total_bp}}.

Mapping
-------
We can now take every read of every sample and attempt to map them back to the set of contigs we created, such that we compute, for every contig, a mean coverage in every sample. For this we use the "{{mapping_version}}" software. A brief summary of the mapping step is included below:

{{mapping_table}}

-------

{{#binning}}
Binning
-------
The next step is to determine which of the {{count_contigs}} contigs are likely to belong together and are part of the same population or genome. For this we use the "{{binning_version}}" software. This produces exactly {{count_bins}} different bins. Since each bin contains a varying number of contigs, we can plot a distribution as seen in figure \ref{bins_contig_dist}:

{{bins_contig_dist}}

Of course, it is more interesting to look, not at the contig count, but at the total amount of nucleotides in a given bin in terms of base pair counts. This distribution can be seen in figure \ref{bins_nucleotide_dist}:

{{bins_nucleotide_dist}}

For further investigation please refer to the individual report of every bin.

-------
{{/binning}}

{{#evaluation}}
Evaluation
----------
Now we would like to measure the consistency or completeness of each bin. For this we use the "{{bin_eval_version}}" software.

This includes running gene prediction on the contigs and identifying marker genes. A distribution of the different metrics can be seen below in the following figures:

{{bins_eval_markers_graph}}
{{bins_eval_marker_sets_graph}}
{{bins_eval_completeness_graph}}
{{bins_eval_contamination_graph}}
{{bins_eval_heterogeneity_graph}}

We can view contamination, completeness and heterogeneity all in one graph (with heterogeneity as a color scale):

{{bins_eval_cch_graph}}

Finally, we can produce a table listing only the bins which are more than 60% complete and less than 10% contamination. Here is the list of these best bins:

{{bins_quality_table}}

In total {{percent_mapped_to_good_bins}} of the original reads from all samples map back to these {{good_bins_count_contigs}} contigs.

-------
{{/evaluation}}

{{#visualization}}
Visualization
-------------
To better view the binning that was performed, we can visualize a few of the properties of the bins. The first graph is a regression of all bins comparing their predicted number of genes against the number of predicted PFAMs.

{{bin_genes_x_pfams}}

The second graph is a regression of all bins comparing their cumulative length in base pairs against the number of predicted genes.

{{bin_bps_x_genes}}

One can plot every contig in an ordination plot, where contigs with similar coverage and nucleotide composition are placed closer together.

{{/visualization}}